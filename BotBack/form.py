import asyncio
import datetime
import time

from aiogram.utils.exceptions import MessageToDeleteNotFound
import aiogram.utils.markdown as md
import psycopg2
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InputFile, ParseMode, \
    WebAppInfo, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.exceptions import CantInitiateConversation
from psycopg2 import Error
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from text_bt import link
from keyboards import bt_sec

from config import CHANNEL_ID

from main import bot, dp

hotOffer = 'https://tgtest.sahome.ru/hotOffer'
index = "https://tgtest.sahome.ru/"
botN = 'https://tgtest.sahome.ru/botN'
contacts = 'https://tgtest.sahome.ru/contacts'


# ----------–í–æ–∑–≤—Ä–∞—Ç –º–µ–Ω—é------------------
@dp.callback_query_handler(text=['Menu'])
async def main_menu(message: types.Message):
    kb1 = types.InlineKeyboardMarkup()
    kb1.insert(types.InlineKeyboardButton(text="–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="Konsult"))
    kb1.add(types.InlineKeyboardButton(text="–û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="Company"))
    # kb1.insert(types.InlineKeyboardButton(text="–°–æ–±—Ä–∞—Ç—å ü§ñ", callback_data="robot"))
    kb1.add(types.InlineKeyboardButton(text="ü§ñ –≤ –∫–æ—Ä–æ–±–∫–µ", web_app=WebAppInfo(url=index)))
    kb1.insert(types.InlineKeyboardButton(text="üî•–ü—Ä–µ–¥–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=hotOffer)))
    kb1.add(types.InlineKeyboardButton(text="–ü—Ä–æ –ë–æ—Ç N.", web_app=WebAppInfo(url=botN)))
    kb1.insert(types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã",  callback_data="contacts"))
    kb1.add(types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—Å—è", switch_inline_query='https://t.me/practicIST_bot'))
    await bot.send_photo(message.from_user.id, InputFile("pic/icon.jpg"), reply_markup=kb1, caption=f'''
    {message.from_user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèª''', )
    # try:
    #     await bot.delete_message(message.chat.id, message.message_id)
    # except (Exception, Error, AttributeError):
    #             print('–ù—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω—å–∫–∏ —Å—Ç—ë—Ä–ª–∏—Å—å')


# ----------------- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è------------------------
def konsult():
    class FormKonsult(StatesGroup):
        klient_message = State()

    @dp.callback_query_handler(text="Konsult")
    async def answer_k(message: types.message, state: FSMContext):
        button_cancel = InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        cancelButton = ReplyKeyboardMarkup(resize_keyboard=True).add(button_cancel)
        await FormKonsult.klient_message.set()
        await bot.send_message(message.from_user.id, f'''
‚úâÔ∏è<strong>{message.from_user.first_name}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</strong> üëáüèª''',
                               parse_mode=ParseMode.HTML, reply_markup=cancelButton)

    @dp.message_handler(state='*', commands='cancel')
    @dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    async def cancel(message: types.message, state: FSMContext):
        current_state = await state.get_state()
        if current_state is None:
            return

        await state.finish()
        await bot.send_message(message.from_user.id, text='''–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏‚õî''', reply_markup=bt_sec)

    @dp.message_handler(state=FormKonsult.klient_message)
    async def text_user(callback: types.callback_query, state: FSMContext):
        async with state.proxy() as data:
            data['klient_message'] = callback.text

            await bot.send_message(CHANNEL_ID, md.text(md.text('<b>üì© –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b>'),
                                                       md.text(''),
                                                       md.text(f'<b>TG user id: {callback.from_user.id} </b>'),
                                                       md.text(
                                                           f'<b>TG first name: {callback.from_user.first_name} </b>'),
                                                       md.text(f'<b>TG last name: {callback.from_user.last_name} </b>'),
                                                       md.text(f'<b>TG user name: @{callback.from_user.username} </b>'),
                                                       md.text(''),
                                                       md.text(f'üóì<b>–¥–∞—Ç–∞:{datetime.date.today()} </b>'),
                                                       md.text(
                                                           f'‚è∞<b>–≤—Ä–µ–º—è:{datetime.datetime.now().strftime("%H:%M:%S")} </b>'),
                                                       md.text(f'_____'),
                                                       md.text('üë®', f"<b> {(data['klient_message'])}</b>"),
                                                       sep='\n'))
            await bot.send_message(CHANNEL_ID, f"@{callback.from_user.username}, {callback.from_user.id}")
        await state.finish()
        await bot.send_message(callback.from_user.id,
                               f"{callback.from_user.first_name}, <b> –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–≤–∏–ª–∏ –ª–∏—á–Ω–æ–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. <u>–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞</u>\n\n–°–ø–∞—Å–∏–±–æ!ü§ù</b>",
                               reply_markup=bt_sec)
        await asyncio.sleep(2)
        # try:    
        #     for delit in range(0,2):
        #         await bot.delete_message(callback.chat.id, callback.message_id-delit)
        # except (Exception, Error, MessageToDeleteNotFound):
        #     print('–ù—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω—å–∫–∏ —Å—Ç—ë—Ä–ª–∏—Å—å')


# ------------------------------------------------------------------------------------------------------------------------------------------


# --------------------–ü–æ–¥–¥–µ—Ä–∂–∫–∞------------------------------
class FormSos(StatesGroup):
    message_bot = State()
    answer_admin = State()


@dp.message_handler(text=['üÜò|–ü–æ–º–æ—â—å'])
async def post(message: types.Message):
    button_cancel = InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel')
    cancelButton = ReplyKeyboardMarkup(resize_keyboard=True).add(button_cancel)
    await FormSos.message_bot.set()
    await bot.send_message(message.from_user.id,
                           f'''{message.from_user.first_name}, –∫–∞–∫–æ–π —É –í–∞—Å –≤–æ–ø—Ä–æ—Å‚ùì
üìù –û–ø–∏—à–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É, —á–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –í—ã –æ–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ –º—ã —Å–º–æ–∂–µ–º –ø–æ–º–æ—á—å –í–∞–º üëáüèª
''', reply_markup=cancelButton)


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel(message: types.message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await bot.send_message(message.from_user.id, text='''–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏‚õî''', reply_markup=bt_sec)
    await state.finish()
    # try:    
    #         for delit in range(1,20):
    #             await bot.delete_message(message.chat.id, message.message_id-delit)
    # except (Exception, Error, MessageToDeleteNotFound):
    #         print('–ù—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω—å–∫–∏ —Å—Ç—ë—Ä–ª–∏—Å—å')


@dp.message_handler(state=FormSos.message_bot)
async def user_text(callback: types.callback_query, state: FSMContext):
    async with state.proxy() as data:
        data['klient_message'] = callback.text

        await bot.send_message(CHANNEL_ID,
                               md.text(md.text('üì© <strong>–ü–û–î–î–ï–†–ñ–ö–ê</strong>'),
                                       md.text(''),
                                       md.text(
                                           f'<b>TG user id: {callback.from_user.id}</b>'),
                                       md.text(
                                           f'<b>TG first name: {callback.from_user.first_name}</b>'),
                                       md.text(
                                           f'<b>TG last name: {callback.from_user.last_name}</b>'),
                                       md.text(
                                           f'<b>TG user name: @{callback.from_user.username}</b>'),
                                       md.text(''),
                                       md.text(
                                           f'‚≠êÔ∏è<b>–¥–∞—Ç–∞:{datetime.date.today()}</b>'),
                                       md.text(
                                           f'‚≠êÔ∏è<b>–≤—Ä–µ–º—è:{datetime.datetime.now().time()}</b>'),
                                       md.text(f'_____'),
                                       md.text(
                                           f"üÜò\n<b>{data['klient_message']}</b>"),
                                       sep='\n'))
        await state.finish()
        await bot.send_message(CHANNEL_ID, f"@{callback.from_user.username}, {callback.from_user.id}")
        await bot.send_message(callback.from_user.id, "–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.\n\n–°–ø–∞—Å–∏–±–æ!ü§ù",
                               reply_markup=bt_sec)
        await asyncio.sleep(1)
        # try:    
        #     for delit in range(0,3):
        #         await bot.delete_message(callback.chat.id, callback.message_id-delit)
        # except (Exception, Error, MessageToDeleteNotFound):
        #     print('–ù—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω—å–∫–∏ —Å—Ç—ë—Ä–ª–∏—Å—å')


# ---------------------------------------------------------------------------------------------------------
# --------------------–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å------------------------------
def post():
    class FormPost(StatesGroup):
        klient_post = State()

    @dp.message_handler(text="üìù|–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª")
    async def post_bt(callback: types.callback_query, state: FSMContext):
        await callback.answer('–ö–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
        await asyncio.sleep(3)
        await FormPost.klient_post.set()
        await callback.answer(f'{callback.from_user.username}, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å.')
        await callback.delete()
    #
    # @dp.message_handler(state=FormPost.klient_post, content_types=types.ContentTypes.TEXT)
    # async def post_kl(call: types.callback_query, state: FSMContext):
    #     async with state.proxy() as data:
    #         data['klient_post'] = call.text
    #         await bot.send_message(CHANNEL_ID, md.text(md.text(f'<b>üì© –Ω–æ–≤—ã–π –ü–û–°–¢</b> '),
    #                                                    md.text(''),
    #                                                    md.text(f'TG user id: {call.from_user.id}'),
    #                                                    md.text(f'TG first name: {call.from_user.first_name}'),
    #                                                    md.text(f'TG user name: {call.from_user.username}'),
    #                                                    md.text(''),
    #                                                    md.text(f'‚≠ê–¥–∞—Ç–∞: {datetime.date.today()}'),
    #                                                    md.text(f'‚≠ê–≤—Ä–µ–º—è: {datetime.datetime.now().time()}'),
    #                                                    md.text(f'_____'),
    #                                                    md.text(f"<b>üìùÔ∏è —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:</b>"),
    #                                                    md.text('üëáüèª', data['klient_post']),
    #                                                    md.text(f''),
    #                                                    md.text(f'üíæÔ∏è —Ñ–∞–π–ª / —Ñ–æ—Ç–æ / –≤–∏–¥–µ–æ'),
    #                                                    md.text(f'_____'),
    #                                                    md.text(f''),
    #                                                    md.text(f'‚Ä¢ –ø–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: '),
    #                                                    md.text(f''),
    #                                                    md.text(f'<b>ü§ñÔ∏è –º–µ–Ω—é –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π:</b>'),
    #                                                    md.code(f'‚îú –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞'),
    #                                                    md.code(f'‚îú –æ—Ç–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'),
    #                                                    md.code(f'‚îî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—á–µ—Ä–µ–¥—å'),
    #                                                    md.text(f''),
    #                                                    md.text(f'ü§ñÔ∏è –∏–Ω—Ñ–æ—Ä–º–µ—Ä –ø–æ–¥–ø–∏—Å—á–∏–∫—É: '),
    #                                                    md.text(f'–º–¥–∞... –ù—É –∏ –¥–∏—á—å'),
    #                                                    sep='\n'))
    #
    #     await state.finish()
    #     await bot.send_message(call.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –Ω–æ–≤–æ—Å—Ç—å.\n\n–°–ø–∞—Å–∏–±–æ!ü§ù")
    #     time.sleep(2)
    #     await call.delete()
    #     await main_menu(call)


# ----------Form "–°–æ–±—Ä–∞—Ç—å"-----------------
def form_colect():
    class Form(StatesGroup):
        Company = State()
        Phone = State()
        ClientName = State()
        E_mail = State()
        RobotType = State()
        PhoneSize = State()
        telephonia = State()
        Confirm = State()

    @dp.callback_query_handler(text="robot")
    async def robot(message: types.Message, state: FSMContext):
        button_cancel = InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        cancelButton = ReplyKeyboardMarkup(resize_keyboard=True).add(button_cancel)
        await Form.Company.set()
        await bot.send_message(message.from_user.id, f'''{message.from_user.first_name}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–æ–±–æ—Ç–∞ –∏ —É–∑–Ω–∞–π—Ç–µ, —á–µ–º –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –í–∞–º –ø–æ–ª–µ–∑–µ–Ω!
_____
1Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ üëáüèª''', reply_markup=cancelButton, parse_mode='HTML')

    @dp.message_handler(state='*', commands='cancel')
    @dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    async def cancel(message: types.message, state: FSMContext):
        current_state = await state.get_state()
        if current_state is None:
            return

        await bot.send_message(message.from_user.id, text='''–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏‚õî''', reply_markup=bt_sec)
        await state.finish()
        await asyncio.sleep(1)

    @dp.message_handler(state=Form.Company)
    async def client_company(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['Company'] = message.text

        await Form.next()
        await bot.send_message(message.from_user.id, '2Ô∏è‚É£ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëáüèª')


    @dp.message_handler(state=Form.Phone)
    async def client_phone(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['Phone'] = message.text

        await Form.next()
        await bot.send_message(message.from_user.id, '3Ô∏è‚É£ –í–∞—à–µ –ò–º—è üëáüèª')

    @dp.message_handler(state=Form.ClientName)
    async def client_name(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['ClientName'] = message.text

        await Form.next()
        await bot.send_message(message.from_user.id, '4Ô∏è‚É£ –í–∞—à E-mail üëáüèª')

    @dp.message_handler(state=Form.E_mail)
    async def client_email(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['E_mail'] = message.text

        kb_form = InlineKeyboardMarkup()
        kb_form.add(types.InlineKeyboardButton(text='–í–∞–ª–∏–¥–∞—Ü–∏—è/–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è', callback_data='1'))
        kb_form.add(types.InlineKeyboardButton(text='–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π –Ω–∞–±–æ—Ä', callback_data='2'))
        kb_form.add(types.InlineKeyboardButton(text='HLR –∑–∞–ø—Ä–æ—Å—ã', callback_data='3'))
        kb_form.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–¥–∞—á–∞ –≥–æ–ª–æ—Å–∞', callback_data='4'))
        kb_form.add(types.InlineKeyboardButton(text='–î–∏–∞–ª–æ–≥ "—Ä–æ–±–æ—Ç-–ß–µ–ª–æ–≤–µ–∫"', callback_data='5'))
        kb_form.add(types.InlineKeyboardButton(text='–†–æ–±–æ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â—É—é —Å–≤—è–∑—å', callback_data='6'))

        await Form.next()
        await bot.send_message(message.from_user.id,
                               '''5Ô∏è‚É£ –ö–∞–∫–æ–π —Ç–∏–ø —Ä–æ–±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–µ–Ω? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ 
    –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:

    ‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è / –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–∞–∑—ã –Ω–æ–º–µ—Ä–æ–≤
    ‚úì –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π –Ω–∞–±–æ—Ä (–∞–≤—Ç–æ–¥–æ–∑–≤–æ–Ω)
    ‚úì HLR –∑–∞–ø—Ä–æ—Å—ã
    ‚úì –° –ø–µ—Ä–µ–¥–∞—á–µ–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    ‚úì –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ + –≤–µ–¥–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ ¬´—Ä–æ–±–æ—Ç-–ß–µ–ª–æ–≤–µ–∫¬ª
    ‚úì –†–æ–±–æ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â—É—é —Å–≤—è–∑—å
    _____

    ‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º, –∫–∞–∫–∏–µ —Ç–∏–ø—ã 
     —Ä–æ–±–æ—Ç–∞ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç üëáüèª''', reply_markup=kb_form)


    @dp.callback_query_handler(text_contains='', state=Form.RobotType)
    async def client_robot_type(callback_query: types.callback_query, state: FSMContext):
        mass = ''
        match callback_query.data:
            case '1':
                mass = '–í–∞–ª–∏–¥–∞—Ü–∏—è/–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è'
            case '2':
                mass = '–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π –Ω–∞–±–æ—Ä'
            case '3':
                mass = 'HLR –∑–∞–ø—Ä–æ—Å—ã'
            case '4':
                mass = '–ü–µ—Ä–µ–¥–∞—á–∞ –≥–æ–ª–æ—Å–∞'
            case '5':
                mass = '–î–∏–∞–ª–æ–≥ "—Ä–æ–±–æ—Ç-–ß–µ–ª–æ–≤–µ–∫"'
            case '6':
                mass = '–†–æ–±–æ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â—É—é —Å–≤—è–∑—å'
            case _:
                mass = callback_query.text

        async with state.proxy() as data:
            data['RobotType'] = mass

        await Form.next()
        await bot.send_message(callback_query.from_user.id, '''6Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤, 
      –∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤ –æ–±–∑–≤–æ–Ω –≤ –¥–µ–Ω—å üëáüèª''')

    @dp.message_handler(state=Form.PhoneSize)
    async def client_phone_size(message: types.message, state: FSMContext):
        async with state.proxy() as data:
            data['PhoneSize'] = message.text

        kb_phones = InlineKeyboardMarkup()
        kb_phones.add(types.InlineKeyboardButton(text="—Å–≤–æ—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏—è", callback_data="1"))
        kb_phones.add(types.InlineKeyboardButton(text='—Ç–µ–ª–µ—Ñ–æ–Ω–∏—è + —Ä–æ–±–æ—Ç', callback_data='2'))
        await Form.next()
        await bot.send_message(message.from_user.id, '''7Ô∏è‚É£ –î–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö 
    —Å–æ–æ–±—â–µ–Ω–∏–π –∫ —Ä–æ–±–æ—Ç—É –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ 
    —Å–≤—è–∑–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ‚Äì —ç—Ç–æ 
    –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –ª–∏–±–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã –Ω–∞ –∏—Å—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏ 
    —É –Ω–∞—Å. 
    –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º: üëáüèª''', reply_markup=kb_phones)

    @dp.callback_query_handler(text_contains='', state=Form.telephonia)
    async def client_telephonia(callback: types.callback_query, state: FSMContext):
        global connection, cursor
        mass = ''
        match callback.data:
            case '1':
                mass = '—Å–≤–æ—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏—è'
            case '2':
                mass = '—Ç–µ–ª–µ—Ñ–æ–Ω–∏—è + —Ä–æ–±–æ—Ç'
            case _:
                mass = callback.text
        async with state.proxy() as data:
            data['telephonia'] = mass
            markup = types.ReplyKeyboardRemove()

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–°–æ–≥–ª–∞—Å–µ–Ω", "–ù–µ—Ç"]
        keyboard.add(*buttons)
        await Form.next()
        await bot.send_message(callback.from_user.id, f'''
–ë–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.
–ï—Å–ª–∏ –í—ã {link}, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–≥–ª–∞—Å–µ–Ω". 
–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –Ω–∞–∂–º–∏—Ç–µ "–ù–µ—Ç."''', reply_markup=keyboard, disable_web_page_preview=True)




    @dp.message_handler(state=Form.Confirm)
    async def confirm(callback: types.callback_query, state: FSMContext):
        global connection, cursor
        mass = ''
        match callback.text:
            case '1':
                mass = "–°–æ–≥–ª–∞—Å–µ–Ω"
            case '2':
                mass = "–ù–µ—Ç"
            case _:
                mass = callback.text
        async with state.proxy() as data:
            data['Confrim'] = mass

        if (mass == "–°–æ–≥–ª–∞—Å–µ–Ω"):
            await bot.send_message(CHANNEL_ID, md.text(md.text('<strong>ü§ñ–°–ë–û–†–ö–ê</strong>\n'),
                                                       md.text(f"<b>TG user id: {callback.from_user.id}</b>"),
                                                       md.text(
                                                           f"<b>TG first name: {callback.from_user.first_name}</b>"),
                                                       md.text(f"<b>TG last name: {callback.from_user.last_name}</b>"),
                                                       md.text(f"<b>TG username: {callback.from_user.username}</b>"),
                                                       md.text(f'üóì<b>–¥–∞—Ç–∞:{datetime.date.today()} </b>'),
                                                       md.text(
                                                           f'‚è∞<b>–≤—Ä–µ–º—è:{datetime.datetime.now().strftime("%H:%M:%S")} </b>'),
                                                       md.text('--------------'),
                                                       md.text(f"üî• <strong>{data['Company']}</strong>"),
                                                       md.text(f"üî• <strong>{data['Phone']}</strong>"),
                                                       md.text(f"üî• <strong>{data['ClientName']}</strong>"),
                                                       md.text(f"üî• <strong>{data['E_mail']}</strong>"),
                                                       md.text(f"üî• <strong>{data['RobotType']}</strong>"),
                                                       md.text(f"üî• <strong>{data['PhoneSize']}</strong>"),
                                                       md.text(f"üî• <strong>{data['telephonia']}</strong>"),
                                                       sep='\n'), parse_mode=ParseMode.HTML)
            await state.finish()
            await bot.send_message(CHANNEL_ID, f"@{callback.from_user.username}, {callback.from_user.id}")
            await bot.send_message(callback.from_user.id, '<b>–°–ø–∞—Å–∏–±–æ! \n –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è</b>ü§ù', reply_markup=bt_sec,
                                   parse_mode=ParseMode.HTML)
            await asyncio.sleep(2)
            # try:
            #     for delit in range(1,20):
            #         await bot.delete_message(callback.chat.id, callback.message_id-delit)
            # except (Exception, Error, MessageToDeleteNotFound):
            #     print('–ù—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω—å–∫–∏ —Å—Ç—ë—Ä–ª–∏—Å—å')

            try:
            # –î–∞—Ç–∞
                now = datetime.datetime.now()
                timeN = now.strftime("%d/%m/%Y")

                connection = psycopg2.connect(  database='for_bots',
                                                user='wisdom',
                                                password='vZSi#6j?X$',
                                                host='localhost',
                                                port='5432')
                print('–ë–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞')
                connection.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
                cursor = connection.cursor()
                cursor.execute(f'''INSERT INTO FORM_BOT (company, phone, name, e_mail, time, username) 
                VALUES ('{data['Company']}', {data['Phone']}, '{data['ClientName']}', '{data['E_mail']}','{timeN}','{callback.from_user.username}')''')
            except (Exception, Error) as error:
                print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL –≤ —Ñ–æ—Ä–º–µ', error)
            finally:
                if connection:
                    cursor.close()
                    connection.close()
        else:
            await bot.send_message(callback.from_user.id, f'''–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ë–æ—Ç–æ–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ 
–ø–æ –ø—Ä–∏—á–∏–Ω–µ –≤–∞—à–µ–≥–æ –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö.''', reply_markup=bt_sec)
            await state.finish()
            await asyncio.sleep(1)
            # try:
            #     for delit in range(1,20):
            #         await bot.delete_message(callback.chat.id, callback.message_id-delit)
            # except (Exception, Error, MessageToDeleteNotFound):
            #     print('–ù—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω—å–∫–∏ —Å—Ç—ë—Ä–ª–∏—Å—å')


# ----------End Form "–°–æ–±—Ä–∞—Ç—å"-----------------


# ----------Form "–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"-----------------
def form_new_mess():
    class Forma(StatesGroup):
        Mes = State()

    @dp.callback_query_handler(text="mess_to_add")
    async def robot_voic(message: types.message, state: FSMContext):
        button_cancel = InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        cancelButton = ReplyKeyboardMarkup(resize_keyboard=True).add(button_cancel)
        await Forma.Mes.set()
        await bot.send_message(message.from_user.id, f'''<b>–£–≤–∞–∂–∞–µ–º—ã–π {message.from_user.first_name}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!</b>üëáüèª
    ''', parse_mode=ParseMode.HTML, reply_markup=cancelButton)

    @dp.message_handler(state='*', commands='cancel')
    @dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    async def cancel(message: types.message, state: FSMContext):
        current_state = await state.get_state()
        if current_state is None:
            return
        
        await bot.send_message(message.from_user.id, text='''–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏‚õî''', reply_markup=bt_sec)
        await state.finish()
        await message.reply()

    @dp.message_handler(state=Forma.Mes)
    async def client_mess(message: types.message, state: FSMContext):
        async with state.proxy() as data:
            data['ClientMess'] = message.text
            await bot.send_message(CHANNEL_ID, md.text(md.text('<strong>üí¨ –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</strong>'),
                                                       md.text(f"<b>TG user id: {message.from_user.id}</b>"),
                                                       md.text(
                                                           f"<b>TG first name: {message.from_user.first_name}</b>"),
                                                       md.text(
                                                           f"<b>TG last name: {message.from_user.last_name}</b>"),
                                                       md.text(f"<b>TG username: {message.from_user.username}</b>"),
                                                       md.text(f'üóì<b>–¥–∞—Ç–∞:{datetime.date.today()} </b>'),
                                                       md.text(
                                                           f'‚è∞<b>–≤—Ä–µ–º—è:{datetime.datetime.now().strftime("%H:%M:%S")} </b>'),
                                                       md.text('--------------'),
                                                       md.text(
                                                           f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n <strong>{data['ClientMess']}</strong>"),
                                                       sep='\n'), parse_mode=ParseMode.HTML)
            await bot.send_message(CHANNEL_ID, f"@{message.from_user.username}, {message.from_user.id}")

            await state.finish()
            await bot.send_message(message.from_user.id, '<b>–°–ø–∞—Å–∏–±–æ! \n –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è</b>ü§ù',
                                   parse_mode=ParseMode.HTML, reply_markup=bt_sec)

# ----------End Form------------
#