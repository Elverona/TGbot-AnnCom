import asyncio
import time
import datetime

import psycopg2
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InputFile, WebAppInfo
from aiogram.utils import executor
from aiogram.utils.exceptions import CantInitiateConversation, MessageCantBeDeleted, MessageToDeleteNotFound
from psycopg2 import Error
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

import keyboards
from form import form_colect, form_new_mess, konsult, post
from keyboards import bt_sec
from main import bot, dp
from text_bt import comp, link, cont

hotOffer = 'https://tgtest.sahome.ru/hotOffer'
index = "https://tgtest.sahome.ru/"
botN = 'https://tgtest.sahome.ru/botN'
contacts = 'https://tgtest.sahome.ru/contacts'

# -------------------–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ-------------------------
@dp.message_handler(commands=['start'])
async def process_hi1_command(message: types.Message):
    # global connection, cursor
    await message.answer(f'''ü§ñ –ê–≤—Ç–æ–¥–∞–π–ª–µ—Ä ¬´–ë–æ—Ç N.¬ª
 –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–æ–±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞

 üî•–ø–µ—Ä–µ–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã 
   –ß–µ–ª–æ–≤–µ–∫–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —É–º–µ–µ—Ç –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥
   
 üî•—É–º–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤

 ‚úì –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∞–∫—Ü–∏—è—Ö
 ‚úì –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
 ‚úì –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤, –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 ‚úì —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–∞–∑—ã –Ω–æ–º–µ—Ä–æ–≤
 ‚úì –ø–æ–≤—ã—à–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
 ‚úì –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ‚Ä¶
 _____
    {message.from_user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèª''', reply_markup=bt_sec)

    try:
        now = datetime.datetime.now()
        timeN = now.strftime("%d/%m/%Y")
        connection = psycopg2.connect(database='for_bots',
                                        user='wisdom',
                                        password='vZSi#6j?X$',
                                        host='localhost',
                                        port='5432')
        print('–ë–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞')
        cursor = connection.cursor()
        connection.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        # print(cursor.execute(f'select from users where user_id = {message.from_user.id}'))
        # if cursor.execute(f'select from users where user_id = {message.from_user.id}') == None:
        cursor.execute(f'''insert into USERS (user_id, name, username, time)
                            values ('{message.from_user.id}', '{message.from_user.first_name}', '{message.from_user.username}','{timeN}')
                              on conflict (user_id) do nothing''')
    except (Exception, Error) as error:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL', error)

    finally:
        if connection:
            cursor.close()
            connection.close()


#  ----------------- üìù|–ö–∞–Ω–∞–ª -----------------------------------------------
@dp.message_handler(text=['üìù|–ö–∞–Ω–∞–ª'])
async def canal(message: types.Message):
    kb_canal = types.InlineKeyboardMarkup()
    kb_canal.insert(types.InlineKeyboardButton(text="|–ö–ê–ù–ê–õ", url='https://t.me/botN_ai'))
    kb_canal.add(types.InlineKeyboardButton(text="|–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="Menu"))
    await bot.send_photo(message.from_user.id, InputFile('pic/Mini_icon.jpg'), reply_markup=kb_canal,
                         caption=f'''{message.from_user.first_name}, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ üëá''', )
    await bot.delete_message(message.chat.id, message.message_id)

#  -------------------------------------------------

# Help------------------------------------------------
@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é!")
    await bot.delete_message(message.chat.id, message.message_id)


# Menu------------------------------------------------
@dp.message_handler(text=['-|–ú–µ–Ω—é'])
async def main_menu(message: types.Message):
    kb1 = types.InlineKeyboardMarkup()
    kb1.insert(types.InlineKeyboardButton(text="–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="Konsult"))
    kb1.add(types.InlineKeyboardButton(text="–û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="Company"))
    # kb1.insert(types.InlineKeyboardButton(text="–°–æ–±—Ä–∞—Ç—å ü§ñ", callback_data="robot"))
    kb1.add(types.InlineKeyboardButton(text="ü§ñ –≤ –∫–æ—Ä–æ–±–∫–µ", web_app=WebAppInfo(url=index)))
    kb1.insert(types.InlineKeyboardButton(text="üî•–ü—Ä–µ–¥–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=hotOffer)))
    kb1.add(types.InlineKeyboardButton(text="–ü—Ä–æ –ë–æ—Ç N.", web_app=WebAppInfo(url=botN)))
    kb1.insert(types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã",callback_data="contacts"))
    kb1.add(types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—Å—è", switch_inline_query='https://t.me/practicIST_bot'))
    await bot.send_photo(message.from_user.id, InputFile("pic/icon.jpg"), reply_markup=kb1, caption=f''' {message.from_user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèª''', )
    await bot.delete_message(message.chat.id, message.message_id)


# ----------- Form –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ------------
konsult()
# ------------------------------------------
post()

# ---------- Form "–°–æ–±—Ä–∞—Ç—å"-----------------
form_colect()
# -------------------------------------------

# ----------Form "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"----------
form_new_mess()


# ------------------------------------------


# –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é----------------------------------------------------------------------------------------------
@dp.callback_query_handler(text_contains='', state='*')
async def qr_message(call: types.callback_query, state: FSMContext):
    await state.get_state()
    await state.finish()
    code = call.data
    match code:
        # –û –∫–æ–º–ø–∞–Ω–∏–∏ ----------------------------------------------------------------------------------------------------------------------------
        case "Company":
            kb_Company = InlineKeyboardMarkup()
            kb_Company.row(types.InlineKeyboardButton(text='‚úÖ|–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', callback_data='Konsult'))
            kb_Company.row(types.InlineKeyboardButton(text='ü§ñ –≤ –ö–û–†–û–ë–ö–ï', web_app=WebAppInfo(url=index)))
            # kb_Company.row(types.InlineKeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã', web_app=WebAppInfo(url=contacts)))
            kb_Company.row(types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='Menu'))
            await bot.send_photo(call.from_user.id, InputFile('pic/Mini_icon.jpg'), reply_markup=kb_Company,
                                 caption=comp)
        #–ö–æ–Ω—Ç–∞–∫—Ç—ã ------------------------------------------------------------------------------------------------------
        case "contacts":
            kb_contacts = InlineKeyboardMarkup()
            kb_contacts.insert(types.InlineKeyboardButton(text='üì®|–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ—â–µ–Ω–∏–µ', callback_data='mess_to_add'))
            kb_contacts.row(types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='Menu'))
            await bot.send_message(call.from_user.id, cont, disable_web_page_preview=True, reply_markup=kb_contacts)
        # –ü—Ä–æ –±–æ—Ç N ----------------------------------------------------------------------------------------------------------------------
        # case "bot_info":
        #     kb_bot_info = InlineKeyboardMarkup()
        #     kb_bot_info.row(types.InlineKeyboardButton(text='‚ùì –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å', callback_data='may_ex'))
        #     kb_bot_info.row(types.InlineKeyboardButton(text='| –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='Menu'))
        #     await bot.send_photo(call.from_user.id, InputFile('pic/Mini_icon.jpg'), reply_markup=kb_bot_info,
        #                          caption=bot_inf)
        # ‚ùì –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å ---------------------------------------------------------------------------------------------------
        # case "may_ex":
        #     kb_may_ex = InlineKeyboardMarkup()
        #     kb_may_ex.row(types.InlineKeyboardButton(text='‚¨Ö| –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='bot_info'))
        #     kb_may_ex.row(types.InlineKeyboardButton(text='| –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='Menu'))
        #     await bot.send_photo(call.from_user.id, InputFile('pic/Mini_icon.jpg'), reply_markup=kb_may_ex, caption=ex)


@dp.message_handler()
async def admin_reply(message: types.Message):
    # me = await bot.get_me()
    # if not message.reply_to_message:
    #     return
    # if message.reply_to_message.from_user.id != me.id:
    #     return
    # if not message.text:
    #     await bot.send_message(message.chat.id, "–Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
    #     return
    # if message.reply_to_message.text.split('\n')[0] not in keyboards.vturmu:
    #     return
    if not message.reply_to_message.text.__contains__(", "):
        return

    # –ü–∞—Ä—Å–∏–º id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    uid = message.reply_to_message.text.split(", ")[1]
    try:
        await bot.send_message(uid, "<strong>‚ö†–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: </strong>" + message.text)
    except CantInitiateConversation:
        await bot.reply("–û—à–∏–±–∫–∞\n")



